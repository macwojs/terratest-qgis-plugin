# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Terratest
                                 A QGIS plugin
 Read data from terratest dynamic plate
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Maciej Nikiel
        email                : m.nikiel@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt import QtGui
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QFileDialog, QAbstractItemView
# Initialize Qt resources from file resources.py
from qgis._core import QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsProject, QgsVectorLayer

# Import the code for the dialog
from .interface.terratest_dialog_stats_show import TerratestDialogStatsShow
from .interface.terratest_dialog_stats_choose import TerratestDialogStatsChoose
from .interface.terratest_dialog_base import TerratestDialog
from .interface.terratest_dialog_is import TerratestDialogIS

# Terratest Library
from .terratest_lib import TerratestRead as TerraLib, TerratestCalculate

# Additional packages
from numpy import mean, std, around


class Terratest:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Terratest_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Terratest')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.first_start_is = None
        self.first_start_stats = None

        self.dlg = TerratestDialog()
        self.dlg_is = TerratestDialogIS()
        self.dlg_stats = TerratestDialogStatsChoose()
        self.dlg_stats_show = TerratestDialogStatsShow()

        self.layers_is = None
        self.layers_stats = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Terratest', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/terratest/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Wczytaj dane'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Wylicz IS/E2'),
            callback=self.run_is,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Statystyki'),
            callback=self.run_stats,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.first_start_is = True
        self.first_start_stats = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Terratest'),
                action)
            self.iface.removeToolBarIcon(action)

    def choose_files(self):
        files, selected_filter = QFileDialog.getOpenFileNames(self.dlg, "Select terratest files")

        for i in files:
            item = QtGui.QStandardItem(str(i))
            self.dlg.filesView.model().appendRow(item)

    def cancel(self):
        self.delete_all()
        self.dlg.close()

    def generate(self):
        model = self.dlg.filesView.model()
        if model.rowCount():
            vl = self.iface.addVectorLayer("Point?crs=epsg:4326", "terratest_points", "memory")
            pr = vl.dataProvider()
            pr.addAttributes([
                QgsField("name", QVariant.String),
                QgsField("serial_number", QVariant.String),
                QgsField("calibration", QVariant.Date),
                QgsField("date", QVariant.DateTime),
                QgsField("X", QVariant.Double),
                QgsField("Y", QVariant.Double),
                QgsField("s1", QVariant.String),
                QgsField("v1max", QVariant.Double),
                QgsField("s1max", QVariant.Double),
                QgsField("s2", QVariant.String),
                QgsField("v2max", QVariant.Double),
                QgsField("s2max", QVariant.Double),
                QgsField("s3", QVariant.String),
                QgsField("v3max", QVariant.Double),
                QgsField("s3max", QVariant.Double),
                QgsField("Evd", QVariant.Double),
                QgsField("average_s", QVariant.Double),
                QgsField("s/v", QVariant.Double)
            ])
            vl.updateFields()

            for row in range(model.rowCount()):
                index = model.takeItem(row)

                data = TerraLib(index.text())
                cords = data.coordinates_g()

                fet = QgsFeature()
                fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(cords[1], cords[0])))
                fet.setAttributes(data.atr_for_layer())
                pr.addFeatures([fet])

                vl.updateExtents()

        self.cancel()

    def delete(self):
        selected_list = self.dlg.filesView.selectedIndexes()
        selected_list = sorted(selected_list, key=lambda x: -x.row())
        for i in selected_list:
            self.dlg.filesView.model().takeRow(i.row())

    def delete_all(self):
        self.dlg.filesView.model().clear()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False

            model = QtGui.QStandardItemModel()
            self.dlg.filesView.setModel(model)
            self.dlg.filesView.setSelectionMode(QAbstractItemView.ExtendedSelection)

            self.dlg.openButton.clicked.connect(self.choose_files)
            self.dlg.cancelButton.clicked.connect(self.cancel)
            self.dlg.generateButton.clicked.connect(self.generate)
            self.dlg.deleteButton.clicked.connect(self.delete)
            self.dlg.deleteAllButton.clicked.connect(self.delete_all)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def field_must_exist(self, fields, field):
        index = fields.indexFromName(field)
        if index == -1:
            QMessageBox.information(self.dlg_is, 'ERROR', 'Wybrana przez Ciebie warstwa nie zawiera kolumny Evd')

        return index

    def calculate_is_e2(self):
        selected_layer = self.layers_is[self.dlg_is.layerList.currentIndex()]
        fields = selected_layer.fields()

        index = self.field_must_exist(fields, 'Evd')
        if index == -1:
            return

        if not fields[index].type() == QVariant.Double:
            QMessageBox.information(self.dlg_is, 'ERROR', 'Kolumna w wybranej przez Ciebie warstwie nie jest typu '
                                                          'Double')
            return

        soil = self.dlg_is.soilList.currentIndex()
        granularity = self.dlg_is.granularityList.currentIndex()

        layer_provider = selected_layer.dataProvider()

        selected_layer.startEditing()

        if self.dlg_is.isCheckbox.isChecked():
            index_is = fields.indexFromName('Is')
            if index_is == -1:
                layer_provider.addAttributes([QgsField('Is', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_is = fields.indexFromName('Is')

            features = selected_layer.getFeatures()
            for feature in features:
                is_value = TerratestCalculate.calculate_is(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index])
                selected_layer.changeAttributeValue(feature.id(), index_is, round(is_value, 3))

        if self.dlg_is.e2Checkbox.isChecked():
            index_e2 = fields.indexFromName('E2')
            if index_e2 == -1:
                layer_provider.addAttributes([QgsField('E2', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_e2 = fields.indexFromName('E2')

            features = selected_layer.getFeatures()
            for feature in features:
                e2_value = TerratestCalculate.calculate_e2(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index])
                selected_layer.changeAttributeValue(feature.id(), index_e2, round(e2_value, 3))

        if self.dlg_is.idCheckbox.isChecked():
            index_id = fields.indexFromName('Id')
            if index_id == -1:
                layer_provider.addAttributes([QgsField('Id', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_id = fields.indexFromName('Id')

            features = selected_layer.getFeatures()
            for feature in features:
                id_value = TerratestCalculate.calculate_id(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index])
                selected_layer.changeAttributeValue(feature.id(), index_id, round(id_value, 3))

        selected_layer.commitChanges()

        self.cancel_is()

    def cancel_is(self):
        self.dlg_is.layerList.clear()
        self.dlg_is.close()

    def run_is(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_is:
            self.first_start_is = False

            self.dlg_is.countButton.clicked.connect(self.calculate_is_e2)
            self.dlg_is.cancelButton.clicked.connect(self.cancel_is)

            self.dlg_is.soilList.addItems([soil for soil in TerratestCalculate.SOILS])
            self.dlg_is.granularityList.addItems([granularity for granularity in TerratestCalculate.GRANULARITIES])

        self.layers_is = [layer for layer in QgsProject.instance().mapLayers().values() if
                          layer.type() == QgsVectorLayer.VectorLayer]
        # Clear the contents of the comboBox from previous runs
        self.dlg_is.layerList.clear()
        # Populate the layerList with names of all the loaded layers
        self.dlg_is.layerList.addItems([layer.name() for layer in self.layers_is])

        # show the dialog
        self.dlg_is.show()
        # Run the dialog event loop
        self.dlg_is.exec_()

    def cancel_stats(self):
        self.dlg_stats.layerList.clear()
        self.dlg_stats.close()

    def calculate_stats(self):
        selected_layer = self.layers_stats[self.dlg_stats.layerList.currentIndex()]
        fields = selected_layer.fields()

        index = self.field_must_exist(fields, 'Evd')
        if index == -1:
            return

        evd = []
        features = selected_layer.getFeatures()
        for feature in features:
            evd.append(feature.attributes()[index])

        if self.dlg_stats.meanCheckbox.isChecked():
            mean_value = around(mean(evd), 1)
            self.dlg_stats_show.meanText.setText(str(mean_value))

        if self.dlg_stats.stdDevCheckbox.isChecked():
            std_value = around(std(evd), 3)
            self.dlg_stats_show.stdDevText.setText(str(std_value))

        if self.dlg_stats.coeffVariationCheckbox.isChecked():
            coeffVar = around((std(evd)/mean(evd)) * 100, 1)
            self.dlg_stats_show.coeffVariationText.setText(str(coeffVar) + '%')
            if coeffVar < 30:
                result = 'warstwa jednorodna'
                color = 'green'
            else:
                result = 'warstwa niejednorodna'
                color = 'red'

            self.dlg_stats_show.resultText.setText(result)
            self.dlg_stats_show.resultText.setStyleSheet('color: ' + color)

        self.dlg_stats.close()
        self.dlg_stats_show.show()

    def run_stats(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_stats:
            self.first_start_stats = False

            self.dlg_stats.countButton.clicked.connect(self.calculate_stats)
            self.dlg_stats.cancelButton.clicked.connect(self.cancel_stats)

        self.layers_stats = [layer for layer in QgsProject.instance().mapLayers().values() if
                             layer.type() == QgsVectorLayer.VectorLayer]
        # Clear the contents of the comboBox from previous runs
        self.dlg_stats.layerList.clear()
        # Populate the layerList with names of all the loaded layers
        self.dlg_stats.layerList.addItems([layer.name() for layer in self.layers_stats])

        # show the dialog
        self.dlg_stats.show()
        # Run the dialog event loop
        self.dlg_stats.exec_()
