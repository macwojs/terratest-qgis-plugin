# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Terratest
                                 A QGIS plugin
 Read data from terratest dynamic plate
 Generated by Plugin Builder: https://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Maciej Nikiel
        email                : m.nikiel@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import imghdr

import PIL.Image
from PyQt5.QtGui import QFont, QColor
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt import QtGui
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QFileDialog, QAbstractItemView
# Initialize Qt resources from file resources.py
from qgis._core import QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsProject, QgsVectorLayer, QgsLayoutExporter, \
    QgsMessageLog, QgsApplication, QgsPrintLayout, QgsLayoutItemMap, QgsLayoutPoint, QgsLayoutSize, QgsUnitTypes, \
    QgsLayoutItemLabel, QgsLayoutItemPage, QgsLayoutItemScaleBar, QgsPalLayerSettings, QgsVectorLayerSimpleLabeling, \
    QgsTextFormat, QgsTextBufferSettings, QgsLayoutItemPicture

# Import the code for the dialog
from .interface.terratest_dialog_report import TerratestDialogReport
from .interface.terratest_dialog_stats_show import TerratestDialogStatsShow
from .interface.terratest_dialog_stats_choose import TerratestDialogStatsChoose
from .interface.terratest_dialog_base import TerratestDialog
from .interface.terratest_dialog_is import TerratestDialogIS

# Terratest Library
from .terratest_lib import TerratestRead as TerraLib, TerratestCalculate

# Additional packages
from numpy import mean, std, around, array, save, load, append
from fpdf import FPDF
from PyPDF2 import PdfFileMerger, PdfFileReader


class Terratest:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Terratest_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Terratest')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.first_start_is = None
        self.first_start_stats = None
        self.first_start_report = None

        self.dlg = TerratestDialog()
        self.dlg_is = TerratestDialogIS()
        self.dlg_stats = TerratestDialogStatsChoose()
        self.dlg_stats_show = TerratestDialogStatsShow()
        self.dlg_report = TerratestDialogReport()

        self.layers_is = None
        self.layers_stats = None
        self.layers_report = None

        self.settings_path = QgsApplication.qgisSettingsDirPath()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Terratest', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/terratest/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Wczytaj dane'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Wylicz IS/E2'),
            callback=self.run_is,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Statystyki'),
            callback=self.run_stats,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Domy≈õlny szablon wydruku'),
            callback=self.run_print_layout,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Report'),
            callback=self.run_report,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.first_start_is = True
        self.first_start_stats = True
        self.first_start_report = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Terratest'),
                action)
            self.iface.removeToolBarIcon(action)

    def choose_files(self):
        files, selected_filter = QFileDialog.getOpenFileNames(self.dlg, "Select terratest files")

        for i in files:
            item = QtGui.QStandardItem(os.path.basename(i))
            terratest_data = TerraLib(i)
            item.setData(terratest_data)
            self.dlg.filesView.model().appendRow(item)

    def cancel(self):
        self.delete_all()
        self.dlg.close()

    def generate(self):
        model = self.dlg.filesView.model()
        if model.rowCount():
            vl = self.iface.addVectorLayer("Point?crs=epsg:4326", "terratest_points", "memory")
            pr = vl.dataProvider()
            pr.addAttributes([
                QgsField("Pkt", QVariant.Int),
                QgsField("name", QVariant.String),
                QgsField("serial_number", QVariant.String),
                QgsField("hammer_weight", QVariant.String),
                QgsField("calibration", QVariant.Date),
                QgsField("date", QVariant.DateTime),
                QgsField("X", QVariant.Double),
                QgsField("Y", QVariant.Double),
                QgsField("s1", QVariant.String),
                QgsField("v1max", QVariant.Double),
                QgsField("s1max", QVariant.Double),
                QgsField("s2", QVariant.String),
                QgsField("v2max", QVariant.Double),
                QgsField("s2max", QVariant.Double),
                QgsField("s3", QVariant.String),
                QgsField("v3max", QVariant.Double),
                QgsField("s3max", QVariant.Double),
                QgsField("Evd", QVariant.Double),
                QgsField("average_s", QVariant.Double),
                QgsField("s/v", QVariant.Double)
            ])
            vl.updateFields()

            data = []
            for row in range(model.rowCount()):
                item = model.takeItem(row).data()
                data.append(item)

            lp = 1
            # TODO sortowanie po dacie
            for item in data:
                cords = item.coordinates_g()

                fet = QgsFeature()
                fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(cords[1], cords[0])))
                fet.setAttributes([lp] + item.atr_for_layer())
                pr.addFeatures([fet])

                lp = lp + 1

                vl.updateExtents()

            # LABEL FOR LAYER
            pal_layer = QgsPalLayerSettings()
            pal_layer.fieldName = "Pkt"

            # Text format and buffer
            text_format = QgsTextFormat()
            text_format.setSize(12)
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))
            text_format.setBuffer(buffer_settings)
            pal_layer.setFormat(text_format)

            # Label offset
            pal_layer.placement = 1
            pal_layer.quadOffset = 4
            pal_layer.xOffset = 2.0
            pal_layer.yOffset = -3.0

            labeler = QgsVectorLayerSimpleLabeling(pal_layer)
            vl.setLabeling(labeler)
            vl.setLabelsEnabled(True)
            vl.triggerRepaint()

        self.cancel()

    def show_details(self, current, previous):
        item = self.dlg.filesView.model().itemFromIndex(current).data()
        text = "Nazwa: " + item.name + "\n" \
               + "Data: " + item.test_datetime.strftime("%d.%m.%Y") + "\n" \
               + "Godzina: " + item.test_datetime.strftime("%H:%M:%S") + "\n" \
               + "Evd: " + "{:.3f}".format(item.evd)
        self.dlg.detailsText.setPlainText(text)

    def delete(self):
        selected_list = self.dlg.filesView.selectedIndexes()
        selected_list = sorted(selected_list, key=lambda x: -x.row())
        for i in selected_list:
            self.dlg.filesView.model().takeRow(i.row())

    def delete_all(self):
        self.dlg.filesView.model().clear()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False

            model = QtGui.QStandardItemModel()
            self.dlg.filesView.setModel(model)
            # self.dlg.filesView.setSelectionMode(QAbstractItemView.ExtendedSelection)
            self.dlg.filesView.setSelectionMode(QAbstractItemView.ExtendedSelection)

            self.dlg.filesView.selectionModel().currentChanged.connect(self.show_details)

            self.dlg.openButton.clicked.connect(self.choose_files)
            self.dlg.cancelButton.clicked.connect(self.cancel)
            self.dlg.generateButton.clicked.connect(self.generate)
            self.dlg.deleteButton.clicked.connect(self.delete)
            self.dlg.deleteAllButton.clicked.connect(self.delete_all)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def field_must_exist(self, fields, field):
        index = fields.indexFromName(field)
        if index == -1:
            QMessageBox.information(self.dlg_is, 'ERROR', 'Wybrana przez Ciebie warstwa nie zawiera kolumny Evd')

        return index

    def calculate_is_e2(self):
        selected_layer = self.layers_is[self.dlg_is.layerList.currentIndex()]
        fields = selected_layer.fields()

        index = self.field_must_exist(fields, 'Evd')
        if index == -1:
            return

        if not fields[index].type() == QVariant.Double:
            QMessageBox.information(self.dlg_is, 'ERROR', 'Kolumna w wybranej przez Ciebie warstwie nie jest typu '
                                                          'Double')
            return

        soil = self.dlg_is.soilList.currentIndex()
        granularity = self.dlg_is.granularityList.currentIndex()

        layer_provider = selected_layer.dataProvider()

        selected_layer.startEditing()

        if self.dlg_is.isCheckbox.isChecked():
            index_is = fields.indexFromName('Is')
            if index_is == -1:
                layer_provider.addAttributes([QgsField('Is', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_is = fields.indexFromName('Is')

            features = selected_layer.getFeatures()
            for feature in features:
                is_value = TerratestCalculate.calculate_is(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index])
                selected_layer.changeAttributeValue(feature.id(), index_is, round(is_value, 3))

        if self.dlg_is.e2Checkbox.isChecked():
            index_e2 = fields.indexFromName('E2')
            if index_e2 == -1:
                layer_provider.addAttributes([QgsField('E2', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_e2 = fields.indexFromName('E2')

            features = selected_layer.getFeatures()
            for feature in features:
                e2_value = TerratestCalculate.calculate_e2(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index])
                selected_layer.changeAttributeValue(feature.id(), index_e2, round(e2_value, 3))

        if self.dlg_is.idCheckbox.isChecked():
            index_id = fields.indexFromName('Id')
            if index_id == -1:
                layer_provider.addAttributes([QgsField('Id', QVariant.Double)])
                selected_layer.updateFields()
                fields = selected_layer.fields()
                index_id = fields.indexFromName('Id')

            features = selected_layer.getFeatures()
            id_type = self.dlg_is.idMethodList.currentIndex()
            for feature in features:
                id_value = TerratestCalculate.calculate_id(TerratestCalculate.GRANULARITIES[granularity],
                                                           TerratestCalculate.SOILS[soil],
                                                           feature.attributes()[index],
                                                           TerratestCalculate.ID_METHOD[id_type])
                selected_layer.changeAttributeValue(feature.id(), index_id, round(id_value, 3))

        selected_layer.commitChanges()

        self.cancel_is()

    def cancel_is(self):
        self.dlg_is.layerList.clear()
        self.dlg_is.close()

    def run_is(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_is:
            self.first_start_is = False

            self.dlg_is.countButton.clicked.connect(self.calculate_is_e2)
            self.dlg_is.cancelButton.clicked.connect(self.cancel_is)

            self.dlg_is.soilList.addItems([soil for soil in TerratestCalculate.SOILS])
            self.dlg_is.granularityList.addItems([granularity for granularity in TerratestCalculate.GRANULARITIES])
            self.dlg_is.idMethodList.addItems([id_type for id_type in TerratestCalculate.ID_METHOD])

        self.layers_is = [layer for layer in QgsProject.instance().mapLayers().values() if
                          layer.type() == QgsVectorLayer.VectorLayer]
        # Clear the contents of the comboBox from previous runs
        self.dlg_is.layerList.clear()
        # Populate the layerList with names of all the loaded layers
        self.dlg_is.layerList.addItems([layer.name() for layer in self.layers_is])

        # show the dialog
        self.dlg_is.show()
        # Run the dialog event loop
        self.dlg_is.exec_()

    def cancel_stats(self):
        self.dlg_stats.layerList.clear()
        self.dlg_stats.close()

    def calculate_stats(self):
        selected_layer = self.layers_stats[self.dlg_stats.layerList.currentIndex()]
        fields = selected_layer.fields()

        index = self.field_must_exist(fields, 'Evd')
        if index == -1:
            return

        evd = []
        features = selected_layer.getFeatures()
        for feature in features:
            evd.append(feature.attributes()[index])

        if self.dlg_stats.meanCheckbox.isChecked():
            mean_value = around(mean(evd), 1)
            self.dlg_stats_show.meanText.setText(str(mean_value))

        if self.dlg_stats.stdDevCheckbox.isChecked():
            std_value = around(std(evd), 3)
            self.dlg_stats_show.stdDevText.setText(str(std_value))

        if self.dlg_stats.coeffVariationCheckbox.isChecked():
            coeff_var = around((std(evd) / mean(evd)) * 100, 1)
            self.dlg_stats_show.coeffVariationText.setText(str(coeff_var) + '%')
            if coeff_var < 30:
                result = 'warstwa jednorodna'
                color = 'green'
            else:
                result = 'warstwa niejednorodna'
                color = 'red'

            self.dlg_stats_show.resultText.setText(result)
            self.dlg_stats_show.resultText.setStyleSheet('color: ' + color)

        self.dlg_stats.close()
        self.dlg_stats_show.show()

    def run_stats(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_stats:
            self.first_start_stats = False

            self.dlg_stats.countButton.clicked.connect(self.calculate_stats)
            self.dlg_stats.cancelButton.clicked.connect(self.cancel_stats)

        self.layers_stats = [layer for layer in QgsProject.instance().mapLayers().values() if
                             layer.type() == QgsVectorLayer.VectorLayer]
        # Clear the contents of the comboBox from previous runs
        self.dlg_stats.layerList.clear()
        # Populate the layerList with names of all the loaded layers
        self.dlg_stats.layerList.addItems([layer.name() for layer in self.layers_stats])

        # show the dialog
        self.dlg_stats.show()
        # Run the dialog event loop
        self.dlg_stats.exec_()

    def cancel_report(self):
        self.dlg_report.mapsList.clear()
        self.dlg_report.outputFileText.clear()

        self.dlg_report.close()

    def generate_report(self):
        output_file = self.dlg_report.outputFileText.text()
        if output_file == '' or output_file == None:
            QMessageBox.information(self.dlg_report, 'ERROR', 'Musisz okre≈õliƒá miejsce zapisu raportu')
            return
        # output_file = '/home/maciek/Dokumenty/Inzynierka/Plugin/terratest/test_data/a.pdf'

        head, tail = os.path.split(output_file)  # head is path, tail is file name

        pdf = FPDF(format='A4')
        pdf.add_page()

        pdf.add_font('DejaVu', '', os.path.join(os.path.dirname(__file__), 'DejaVuSansCondensed.ttf'), uni=True)

        # Add logo
        image_file = self.dlg_report.imageFileText.text()
        if image_file != '' and image_file != None:
            if not imghdr.what(image_file):
                QMessageBox.information(self.dlg_report, 'ERROR', 'Logo musi byƒá grafikƒÖ rastrowƒÖ')
                return

            image = PIL.Image.open(image_file)
            width, height = image.size
            image.close()
            if height / width >= 3 / 7:
                pdf.image(image_file, x=20, y=30, h=30)
            else:
                pdf.image(image_file, x=20, y=30, w=70)

        y = 15
        # Date and place
        pdf.set_xy(20, y)
        pdf.set_font('DejaVu', '', 11)
        text = self.dlg_report.cityLine.text() + ', ' + self.dlg_report.dateLine.text()
        pdf.cell(w=60, h=8, align='L', txt=text, border=0)

        # attachment
        pdf.set_xy(160, y)
        pdf.set_font('DejaVu', '', 11)
        text = 'Zal. ' + self.dlg_report.attachLine.text()
        pdf.cell(w=30, h=8, align='R', txt=text, border=0)

        y = y + 10
        pdf.set_xy(90, y)
        pdf.set_font('DejaVu', '', 16)
        pdf.cell(w=120, h=8, align='C', txt="Protok√≥≈Ç badania", border=0)

        y = y + 8
        pdf.set_xy(90, y)
        pdf.set_font('DejaVu', '', 14)
        pdf.cell(w=120, h=5, align='C', txt="dynamicznego modu≈Çu odkszta≈Çcenia Evd", border=0)

        pdf.set_font('DejaVu', '', 12)

        selected_layer = self.layers_report[self.dlg_report.layerList.currentIndex()]
        fields = selected_layer.fields()
        features = selected_layer.getFeatures()

        y = y + 12
        elements = [
            'Producent',
            'Numer seryjny',
            'Waga m≈Çota'
        ]

        feature = features.__next__()
        elements_values = [
            'Terratest GmbH',
        ]

        if fields.indexFromName('serial_number') != -1:
            elements_values.append(feature['serial_number'])
        else:
            elements_values.append('')

        if fields.indexFromName('hammer_weight') != -1:
            elements_values.append(feature['hammer_weight'] + 'kg')
        else:
            elements_values.append('')

        for i in range(len(elements)):
            pdf.set_xy(90, y)
            pdf.write(5, elements[i] + ': ' + elements_values[i])
            y = y + 5

        # Dane badania
        elements = [
            'Obiekt',
            'Lokalizacja',
            'Zleceniodawca',
            'Pogoda',
            'Warstwa',
            'Badany materia≈Ç',
            'Grunt r√≥wnowa≈ºny',
            'Uziarnienie',
            'Badanie wykona≈Ç',
            'Opracowa≈Ç'
        ]
        element_values = [
            self.dlg_report.testObjectLine.text(),
            self.dlg_report.locationLine.text(),
            self.dlg_report.buyerLine.text(),
            self.dlg_report.weatherLine.text(),
            self.dlg_report.layerLine.text(),
            self.dlg_report.soilTestLine.text(),
            self.dlg_report.soilEqualLine.text(),
            self.dlg_report.granularityLine.text(),
            self.dlg_report.testerLine.text(),
            self.dlg_report.creatorLine.text()
        ]
        y = y + 5  # distance 10 from last element
        y_temp = y
        for i in range(len(elements)):
            pdf.set_xy(40, y)
            pdf.cell(w=20, h=5, align='R', txt=elements[i] + ':', border=0)
            pdf.cell(w=110, h=5, align='C', txt=element_values[i], border=0)
            y = y + 6
            pdf.line(60, y - 0.5, 185, y - 0.5)
        pdf.rect(15, y_temp - 2, 180, y - y_temp + 5)

        # Wyniki badania
        if self.dlg_report.resultCheckbox.isChecked():
            features = selected_layer.getFeatures()
            columns_name = [
                'Pkt',
                'Data',
                'Osiadanie\nS1\n[mm]',
                'Osiadanie\nS2\n[mm]',
                'Osiadanie\nS3\n[mm]',
                'Osiadanie\n≈õrednie\n[mm]',
                'Evd\n[MPa]',
                'E2\n[MPa]',
                'Is\n[-]',
                'Id\n[-]'
            ]
            columns_width = [
                8,
                40,
                20,
                20,
                20,
                20,
                15,
                20,
                15,
                15
            ]
            header_height = 15
            header_heights = [
                header_height,
                header_height,
                header_height / 3,
                header_height / 3,
                header_height / 3,
                header_height / 3,
                header_height / 2,
                header_height / 2,
                header_height / 2,
                header_height / 2
            ]
            keys = [
                'Pkt',
                'date',
                's1max',
                's2max',
                's3max',
                'average_s',
                'Evd',
                'E2',
                'Is',
                'Id'
            ]

            indexes = {}

            total_width = 0
            for i in range(len(keys)):
                index = fields.indexFromName(keys[i])
                indexes[keys[i]] = [index, columns_name[i], columns_width[i], header_heights[i]]
                if index != -1:
                    total_width = total_width + columns_width[i]

            # Center table
            x = (210 - total_width) / 2
            x_temp = x

            # Header
            y = y + 5
            pdf.set_xy(x, y)
            pdf.set_font('DejaVu', '', 11)
            pdf.set_fill_color(240)
            for key, value in indexes.items():
                if value[0] != -1:
                    pdf.multi_cell(value[2], value[3], value[1], 1, align='C', fill=True)
                x_temp = x_temp + value[2]
                pdf.set_xy(x_temp, y)

            y = y + header_height
            pdf.set_font('DejaVu', '', 10)
            for feature in features:
                pdf.set_xy(x, y)
                for key, value in indexes.items():
                    if value[0] != -1:
                        data = feature.attributes()[value[0]]
                        if key == 'date':
                            data = data.toString('dd.MM.yyyy  hh:mm')
                        if key == 's1max' or key == 's2max' or key == 's3max' or key == 'average_s':
                            data = '%.3f' % round(data, 3)
                        if key == 'Evd' or key == 'E2':
                            data = '%.1f' % round(data, 1)
                        if key == 'Is' or key == 'Id':
                            data = '%.2f' % round(data, 2)

                        pdf.cell(value[2], 5, str(data), 1, align='C')

                y = y + 5

        # Statystyki
        if self.dlg_report.statsCheckbox.isChecked():
            features = selected_layer.getFeatures()
            evd_index = self.field_must_exist(fields, 'Evd')
            if evd_index == -1:
                return
            evd = []
            for feature in features:
                evd.append(feature.attributes()[evd_index])

            y = y + 5
            x = 30
            pdf.set_font('DejaVu', '', 12)

            mean_value = mean(evd)
            pdf.set_xy(x, y)
            pdf.cell(w=60, h=10, align='R', txt="≈örednia arytmetyczna Evd:", border=0)
            pdf.cell(w=20, h=10, align='C', txt=str(around(mean_value, 1)), border=0)
            pdf.cell(w=20, h=10, align='C', txt="[MPa]", border=0)

            std_value = std(evd)
            y = y + 10
            pdf.set_xy(x, y)
            pdf.cell(w=60, h=10, align='R', txt="Odchylenie standardowe Evd:", border=0)
            pdf.cell(w=20, h=10, align='C', txt=str(around(std_value, 3)), border=0)
            pdf.cell(w=20, h=10, align='C', txt="[MPa]", border=0)

            coeff_var = (std_value / mean_value) * 100
            y = y + 10
            pdf.set_xy(x, y)
            pdf.cell(w=60, h=10, align='R', txt="Wsp√≥≈Çczynnik zmienno≈õci Evd:", border=0)
            pdf.cell(w=20, h=10, align='C', txt=str(around(coeff_var, 3)), border=0)
            pdf.cell(w=20, h=10, align='C', txt="[%]", border=0)

            y = y + 10
            pdf.set_xy(x, y)
            pdf.cell(w=60, h=10, align='R', txt="Kryterium jako≈õci:", border=0)
            if coeff_var < 30:
                text = 'Spe≈Çnione - warstwa jednorodna'
                pdf.set_text_color(0, 255, 0)
            else:
                text = 'Niespe≈Çnione - warstwa niejednorodna'
                pdf.set_text_color(255, 0, 0)
            pdf.cell(w=80, h=10, align='C', txt=text, border=0)

        pdf.output(output_file, 'F')

        # Generowanie mapy
        if self.dlg_report.mapCheckbox.isChecked():
            manager = QgsProject.instance().layoutManager()
            layout = manager.layoutByName(self.dlg_report.mapsList.currentText())
            exporter = QgsLayoutExporter(layout)
            temp_path = os.path.join(head, 'temp_asdasdasdasd.pdf')
            exporter.exportToPdf(temp_path, QgsLayoutExporter.PdfExportSettings())

            merge_file = PdfFileMerger()
            merge_file.append(PdfFileReader(output_file))
            merge_file.append(PdfFileReader(temp_path))
            merge_file.write(output_file)
            os.remove(temp_path)

        # Zapisywanie danych z formularza na przyszlosc
        np_array = array(element_values)
        np_array = append(np_array, self.dlg_report.cityLine.text())
        np_array = append(np_array, self.dlg_report.dateLine.text())
        np_array = append(np_array, self.dlg_report.attachLine.text())
        settings_path = os.path.join(self.settings_path, 'report_form.npy')
        save(settings_path, np_array)

    def output_file_report(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg_report, "Select output file ", "", '*.pdf')
        self.dlg_report.outputFileText.setText(filename)

    def image_file_report(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg_report, "Select logo file ", "", '*.png,*.jpg')
        self.dlg_report.imageFileText.setText(filename)

    def run_report(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_stats:
            self.first_start_stats = False

            self.dlg_report.generateButton.clicked.connect(self.generate_report)
            self.dlg_report.cancelButton.clicked.connect(self.cancel_report)
            self.dlg_report.outputFileButton.clicked.connect(self.output_file_report)
            self.dlg_report.imageFileButton.clicked.connect(self.image_file_report)

        # Load vector layers to interface
        self.layers_report = [layer for layer in QgsProject.instance().mapLayers().values() if
                              layer.type() == QgsVectorLayer.VectorLayer]
        self.dlg_report.layerList.clear()
        self.dlg_report.layerList.addItems([layer.name() for layer in self.layers_report])

        # Load maps layouts to interface
        manager = QgsProject.instance().layoutManager()
        self.dlg_report.mapsList.clear()
        self.dlg_report.mapsList.addItems([layer.name() for layer in manager.printLayouts()])

        # Load settings
        try:
            report_settings_array = load(os.path.join(self.settings_path, 'report_form.npy'))
        except:
            pass
        else:
            elements = [
                self.dlg_report.testObjectLine,
                self.dlg_report.locationLine,
                self.dlg_report.buyerLine,
                self.dlg_report.weatherLine,
                self.dlg_report.layerLine,
                self.dlg_report.soilTestLine,
                self.dlg_report.soilEqualLine,
                self.dlg_report.granularityLine,
                self.dlg_report.testerLine,
                self.dlg_report.creatorLine,
                self.dlg_report.cityLine,
                self.dlg_report.dateLine,
                self.dlg_report.attachLine
            ]
            for i in range(report_settings_array.size):
                elements[i].setText(report_settings_array[i])

        # show the dialog
        self.dlg_report.show()
        # Run the dialog event loop
        self.dlg_report.exec_()

    def run_print_layout(self):
        name = "Terratest default"
        manager = QgsProject.instance().layoutManager()
        # for layer in manager.printLayouts():
        #     if layer.name() == name:
        #         QMessageBox.information(self.dlg_is, 'ERROR', 'Ju≈º istnieje domy≈õlny szablon wydruku (Terratest '
        #                                                       'default)')
        #         return

        layouts_list = manager.printLayouts()
        for layout in layouts_list:
            if layout.name() == name:
                manager.removeLayout(layout)

        project = QgsProject.instance()
        layout = QgsPrintLayout(project)
        layout.initializeDefaults()

        # Change for portrait
        pc = layout.pageCollection()
        pc.page(0).setPageSize('A4', QgsLayoutItemPage.Orientation.Portrait)

        layout.setName(name)
        project.layoutManager().addLayout(layout)

        map = QgsLayoutItemMap(layout)
        map.setRect(20, 20, 20, 20)
        canvas = self.iface.mapCanvas()
        map.setExtent(canvas.extent())  # sets map extent to current map canvas
        map.setFrameEnabled(True)
        layout.addLayoutItem(map)
        # Move & Resize
        map.attemptMove(QgsLayoutPoint(10, 40, QgsUnitTypes.LayoutMillimeters))
        map.attemptResize(QgsLayoutSize(190, 220, QgsUnitTypes.LayoutMillimeters))

        title = QgsLayoutItemLabel(layout)
        title.setText("Mapa lokalizacji punkt√≥w pomiarowych")
        title.setFont(QFont("DejaVu Sans", 24))
        title.adjustSizeToText()
        layout.addLayoutItem(title)
        title.attemptMove(QgsLayoutPoint(21, 27, QgsUnitTypes.LayoutMillimeters))

        att_text = QgsLayoutItemLabel(layout)
        att_text.setText("Zal. ")
        att_text.setFont(QFont("DejaVu Sans", 18))
        att_text.adjustSizeToText()
        layout.addLayoutItem(att_text)
        att_text.attemptMove(QgsLayoutPoint(160, 15, QgsUnitTypes.LayoutMillimeters))

        scalebar = QgsLayoutItemScaleBar(layout)
        scalebar.setLinkedMap(map)
        scalebar.setStyle('Single Box')
        scalebar.setFont(QFont("DejaVu Sans", 18))
        scalebar.applyDefaultSize()
        scalebar.setSegmentSizeMode(1)
        scalebar.setNumberOfSegmentsLeft(0)
        scalebar.setMaximumBarWidth(210/3)
        scalebar.update()
        layout.addLayoutItem(scalebar)
        scalebar.attemptMove(QgsLayoutPoint(20, 265, QgsUnitTypes.LayoutMillimeters))

        arrow = QgsLayoutItemPicture(layout)
        arrow.setPicturePath(os.path.join(os.path.dirname(__file__), 'north_arrow.svg'))
        layout.addLayoutItem(arrow)
        arrow.attemptMove(QgsLayoutPoint(15, 45, QgsUnitTypes.LayoutMillimeters))
        arrow.attemptResize(QgsLayoutSize(30, 30, QgsUnitTypes.LayoutMillimeters))

        QMessageBox.information(self.dlg_is, 'SUCCESS', 'Poprawnie dodano szablon wydruku.')